// swiftlint:disable all
// This file was automatically generated and should not be edited.

import Runtime
import CContext

%{
    def _combos(elements, start_idx, length):
        # ignore elements before start_idx
        for i in range(start_idx, len(elements)):
            elem, count = elements[i]
            if count == 0:
                continue
            # base case: only one element needed
            if length == 1:
                yield (elem,)
            else:
                # need more than one elem: mutate the list and recurse
                elements[i] = (elem, count - 1)
                # when we recurse, we ignore elements before this one
                # this ensures we find combinations, not permutations
                for combo in _combos(elements, i, length - 1):
                    yield (elem,) + combo
                # fix the list
                elements[i] = (elem, count)


    def combos(elements, length):
        if length == 0:
            return [[]]
        elements = list(elements.items())
        return _combos(elements, 0, length)

    allowedArguments = 14
    allowedResults = 8

    allowedTypes = { "int" : "Int", "float" : "Double" }
    allowedArgumentMap = { "int" : 6, "float" : 8 }
    allowedResultMap = { "int" : 4, "float" : 4 }
    
    allowedStackSize = 80
}%

extension MethodInfo {

    func call(receiver: AnyObject, arguments: [Any]) throws -> Any {
        assert(arguments.count == self.arguments.count, "Argument count must correspond to original argument count")

        let argumentList = try zip(arguments, self.arguments).flatMap { try resolveArguments(for: $0.0, using: $0.1.type) }.argumentList()
        let registerArguments = argumentList.registerArguments
        let stackArguments = argumentList.stackArguments.stackValues()
        let resultDecoder = try resolveDecoder(for: returnType)

        switch (registerArguments.count, resultDecoder.results.count) {
        % for numberOfArguments in range(allowedArguments + 1):
        % for numberOfResults in range(allowedResults + 1):
        case (${numberOfArguments}, ${numberOfResults}):
            return try callWith${numberOfArguments}ArgumentsTo${numberOfResults}(receiver: receiver, registerArguments: registerArguments, stackArguments: stackArguments, decoder: resultDecoder)
        % end
        % end
        default:
            fatalError("Calls with more than \(MethodInfo.maximumNumberOfArgumentsWithReflection) arguments are not allowed")
        }
    }

}

extension MethodInfo {

    % for numberOfArguments in range(allowedArguments + 1):
        % for numberOfResults in range(allowedResults + 1):
        private func callWith${numberOfArguments}ArgumentsTo${numberOfResults}(receiver: AnyObject, registerArguments: [FunctionArgument], stackArguments: StackValues, decoder: FunctionResultDecoder) throws -> Any {
            switch (
                receiver
                % for index in range(numberOfArguments):
                , registerArguments[${index}]
                % end
                , stackArguments
                % for index in range(numberOfResults):
                , decoder.results[${index}]
                % end
            ) {

            %{ argumentCombinations = list(combos(allowedArgumentMap, numberOfArguments)) }%
            %{ resultCombinations = list(combos(allowedResultMap, numberOfResults)) }%
            % for arguments in argumentCombinations:
                %{ needsStackValues = arguments.count("int") >= 6 or arguments.count("float") >= 8 }%
                %{ maximumStackValueSize = allowedStackSize if (needsStackValues) else 0 }%
                % for stackSize in range(0, maximumStackValueSize + 1):
                    % for results in resultCombinations:

                case (
                    _
                        % for index, type in enumerate(arguments):
                    , .${type}(let arg${index})
                        % end
                        % if stackSize == 0:
                    , .empty
                        % else:
                    , .ofSize${stackSize}(let stack)
                        % end
                        % for index, type in enumerate(results):
                    , .${type}(let res${index})
                        % end
                ):
                        %{ types = ", ".join([allowedTypes[x] for x in arguments]) }%
                        % if stackSize == 0:
                            % if numberOfResults != 0:
                            %{ result_prefix = "_".join(results) }%
                    let function = unsafeBitCast(address, to: (@convention(c) (${types}) -> (${result_prefix}_function_result)).self)
                            % else:
                    let function = unsafeBitCast(address, to: (@convention(c) (${types}) -> (Void)).self)
                            % end
                        % else:
                            % if numberOfResults != 0:
                            %{ result_prefix = "_".join(results) }%
                    let function = unsafeBitCast(address, to: (@convention(c) (${types}, function_argumemt_stack_${stackSize}) -> (${result_prefix}_function_result)).self)
                                % else:
                    let function = unsafeBitCast(address, to: (@convention(c) (${types}, function_argumemt_stack_${stackSize}) -> (Void)).self)
                            % end
                        % end

                        % for index, type in enumerate(arguments):
                    let arg${index}Casted = arg${index}.value
                        % end

                    let selfPointer = Unmanaged.passUnretained(self).toOpaque()
                    let receiverPointer = Unmanaged.passUnretained(receiver).toOpaque()
                    set_self_pointer(receiverPointer)

                        %{ argumentString = ", ".join(["arg" + str(i) + "Casted"  for i in range(numberOfArguments)]) }%
                        % if stackSize == 0:
                            % if numberOfResults != 0:
                    let result = function(${argumentString})
                            % else:
                    function(${argumentString})
                            % end
                        % else:
                            % if numberOfResults != 0:
                    let result = function(${argumentString}, stack)
                            % else:
                    function(${argumentString}, stack)
                            % end
                        % end

                    set_self_pointer(selfPointer)
                        % for index in range(numberOfResults):
                    res${index}.decode(result.res${index})
                        % end
                    return try decoder.decode()
                    % end
                % end
            % end

            default:
                fatalError()
            }
        }
        % end
    % end

}

extension MethodInfo {

    static let maximumNumberOfArgumentsWithReflection = ${allowedArguments}

}

private func estimatedType(of type: Any.Type) throws -> Any.Type {
    let kind = try typeInfo(of: type, .kind)
    switch kind {
    case .class:
        return AnyObject.self
    default:
        return type
    }
}
